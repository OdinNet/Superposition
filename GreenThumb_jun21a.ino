#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/bfe3489f-1e9b-4df1-bc1c-f9fce860bc1f 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String color;
  float humidity;
  float lux_n;
  float soil_moisture_n;
  float temperature;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
// Libraries #################################
#include <Wire.h>
#include "Adafruit_TCS34725.h"
#include "thingProperties.h"
// ###########################################

// Constants #################################
// RGB/LED
const uint8_t LED_PIN = 9;

// Soil
const int SOIL_PIN = A1; 
const uint16_t maxMoistValue = 1023;        // [!] Change in testing
const uint16_t minMoistValue = 0;           // [!] Change in testing

float p1, p2; 

// Wettness
const uint16_t maxSoaknessLevel = 225;      // [!] Change in testing

// ###########################################

// Objects ###################################
// Initialize the TCS34725 sensor
Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_614MS, TCS34725_GAIN_1X);
// ###########################################


int invertValue(int value) {
    int unfilteredValue = value - maxMoistValue; 
    if ( unfilteredValue == 0 ) {
        return unfilteredValue;
    }   
    return (unfilteredValue * -1);
}

float read_soilsensor(int analog_pin) {
    float tempSoil = invertValue(analogRead(analog_pin)); 
    return tempSoil; 
}

// [!] Hanging
void soaknessLevel(int soil_value) {
    // Super Soaked Level 
    if ( soil_value >= maxSoaknessLevel ) {
        Serial.println("Soil Sensor Reading: SUPER SOAKED!"); 
    } else if ( soil_value <= 0 ) {
        Serial.println("Soil Sensor Reading: SUPER DRY"); 
    } else {
        Serial.println("N/A case in soaknessLevel()");
    }
}

void start_rgbsensor() {
    if (tcs.begin()) {
        Serial.println("Found TCS34725 sensor");
        tcs.setInterrupt(true);  // Turn off LED until needed
    } else {
        Serial.println("No TCS34725 found ... check your connections");
        while (1); // Halt if sensor is not found               [!] Infinite Loop
    }
}

void print_rgbcolor(unsigned int r, unsigned int g, unsigned int b, unsigned int c) {
    // Normalize the color values
    float sum = (float)c;
    float red   = r / sum;
    float green = g / sum;
    float blue  = b / sum;
    
    color = "R: " + String(r) + " G: " + String (g) + " B: " + String(b);
    
    // Serial.print("R: "); Serial.print(r);
    // Serial.print(" G: "); Serial.print(g);
    // Serial.print(" B: "); Serial.print(b);
    // Serial.print(" C: "); Serial.println(c);

    // // Determine the dominant color
    // if (red > green && red > blue) {
    //     Serial.println("Detected Color: RED");
    // } else if (green > red && green > blue) {
    //     Serial.println("Detected Color: GREEN");
    // } else if (blue > red && blue > green) {
    //     Serial.println("Detected Color: BLUE");
    // } else {
    //     Serial.println("Detected Color: UNKNOWN");
    // }
    //uint16_t colorTemp = tcs.calculateColorTemperature(r, g, b);
    float templux = (tcs.calculateLux(r, g, b));
    lux_n = templux/200.0;
    Serial.println(tcs.calculateLux(r, g, b)); 
    // Serial.print("Color Temp: "); Serial.print(colorTemp); Serial.print(" K - ");
}

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  // Start LED on RGB sensor
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);

  // Start RGB sensor
  start_rgbsensor();

  humidity = 69;
  temperature = 25;

  soil_moisture_n = 0; 
  p1 = 0; 
  p2 = read_soilsensor(SOIL_PIN); 
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  // Updating the Soil Sensor
  soil_moisture_n = p1; 
  p1 = p2; 
  p2 = read_soilsensor(SOIL_PIN); 
    
  // LED on RGB sensor HIGH
  //digitalWrite(LED_PIN, HIGH);    // Turn on the LED for consistent lighting
  delay(100);                     // Allow the LED to stabilize

  // Start printing color output/lux of RGB sensor
  uint16_t r, g, b, c;
  tcs.getRawData(&r, &g, &b, &c);
  print_rgbcolor(r, g, b, c);    

  //digitalWrite(LED_PIN, LOW);     // Turn off the LED after reading
  delay(200);                     // Wait before the next reading
}












